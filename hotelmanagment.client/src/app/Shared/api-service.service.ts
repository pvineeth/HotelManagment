//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const BASE_URL = new InjectionToken<string>('BASE_URL');

@Injectable()
export class AuthenticationClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  login(body: LoginDTO | undefined): Observable<LoginResponse> {
    let url_ = this.baseUrl + "/api/Authentication/Login";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processLogin(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLogin(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<LoginResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<LoginResponse>;
    }));
  }

  protected processLogin(response: HttpResponseBase): Observable<LoginResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LoginResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class BranchClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param skip (optional) 
   * @param maxResult (optional) 
   * @return Success
   */
  getAllBranchs(skip: number | undefined, maxResult: number | undefined): Observable<GetAllHostelDTOPaginationEntityDto> {
    let url_ = this.baseUrl + "/api/Branch/GetAllBranchs?";
    if (skip === null)
      throw new Error("The parameter 'skip' cannot be null.");
    else if (skip !== undefined)
      url_ += "skip=" + encodeURIComponent("" + skip) + "&";
    if (maxResult === null)
      throw new Error("The parameter 'maxResult' cannot be null.");
    else if (maxResult !== undefined)
      url_ += "maxResult=" + encodeURIComponent("" + maxResult) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAllBranchs(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllBranchs(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetAllHostelDTOPaginationEntityDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetAllHostelDTOPaginationEntityDto>;
    }));
  }

  protected processGetAllBranchs(response: HttpResponseBase): Observable<GetAllHostelDTOPaginationEntityDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetAllHostelDTOPaginationEntityDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param branchId (optional) 
   * @return Success
   */
  getBranchById(branchId: string | undefined): Observable<GetAllHostelDTO> {
    let url_ = this.baseUrl + "/api/Branch/GetBranchById?";
    if (branchId === null)
      throw new Error("The parameter 'branchId' cannot be null.");
    else if (branchId !== undefined)
      url_ += "branchId=" + encodeURIComponent("" + branchId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetBranchById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetBranchById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetAllHostelDTO>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetAllHostelDTO>;
    }));
  }

  protected processGetBranchById(response: HttpResponseBase): Observable<GetAllHostelDTO> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetAllHostelDTO.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  updateBranch(body: UpdateBranchDTO | undefined): Observable<Response> {
    let url_ = this.baseUrl + "/api/Branch/UpdateBranch";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateBranch(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateBranch(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Response>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Response>;
    }));
  }

  protected processUpdateBranch(response: HttpResponseBase): Observable<Response> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Response.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  addNewBranch(body: AddNewBranchDTO | undefined): Observable<Response> {
    let url_ = this.baseUrl + "/api/Branch/AddNewBranch";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAddNewBranch(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAddNewBranch(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Response>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Response>;
    }));
  }

  protected processAddNewBranch(response: HttpResponseBase): Observable<Response> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Response.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param branchId (optional) 
   * @return Success
   */
  deleteBranch(branchId: string | undefined): Observable<Response> {
    let url_ = this.baseUrl + "/api/Branch/DeleteBranch?";
    if (branchId === null)
      throw new Error("The parameter 'branchId' cannot be null.");
    else if (branchId !== undefined)
      url_ += "branchId=" + encodeURIComponent("" + branchId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteBranch(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteBranch(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Response>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Response>;
    }));
  }

  protected processDeleteBranch(response: HttpResponseBase): Observable<Response> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Response.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getAllBranchNames(): Observable<GetAllRolesDTO[]> {
    let url_ = this.baseUrl + "/api/Branch/GetAllBranchNames";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAllBranchNames(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllBranchNames(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetAllRolesDTO[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetAllRolesDTO[]>;
    }));
  }

  protected processGetAllBranchNames(response: HttpResponseBase): Observable<GetAllRolesDTO[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(GetAllRolesDTO.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class HostelClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param skip (optional) 
   * @param maxResult (optional) 
   * @return Success
   */
  getAllHostels(skip: number | undefined, maxResult: number | undefined): Observable<GetAllHostelDTOPaginationEntityDto> {
    let url_ = this.baseUrl + "/api/Hostel/GetAllHostels?";
    if (skip === null)
      throw new Error("The parameter 'skip' cannot be null.");
    else if (skip !== undefined)
      url_ += "skip=" + encodeURIComponent("" + skip) + "&";
    if (maxResult === null)
      throw new Error("The parameter 'maxResult' cannot be null.");
    else if (maxResult !== undefined)
      url_ += "maxResult=" + encodeURIComponent("" + maxResult) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAllHostels(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllHostels(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetAllHostelDTOPaginationEntityDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetAllHostelDTOPaginationEntityDto>;
    }));
  }

  protected processGetAllHostels(response: HttpResponseBase): Observable<GetAllHostelDTOPaginationEntityDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetAllHostelDTOPaginationEntityDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param hostelId (optional) 
   * @return Success
   */
  getHostelById(hostelId: string | undefined): Observable<GetAllHostelDTO> {
    let url_ = this.baseUrl + "/api/Hostel/GetHostelById?";
    if (hostelId === null)
      throw new Error("The parameter 'hostelId' cannot be null.");
    else if (hostelId !== undefined)
      url_ += "hostelId=" + encodeURIComponent("" + hostelId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetHostelById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetHostelById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetAllHostelDTO>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetAllHostelDTO>;
    }));
  }

  protected processGetHostelById(response: HttpResponseBase): Observable<GetAllHostelDTO> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetAllHostelDTO.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  updateHostel(body: GetAllHostelDTO | undefined): Observable<Response> {
    let url_ = this.baseUrl + "/api/Hostel/UpdateHostel";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateHostel(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateHostel(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Response>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Response>;
    }));
  }

  protected processUpdateHostel(response: HttpResponseBase): Observable<Response> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Response.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  addNewHostel(body: AddNewHostelDTO | undefined): Observable<Response> {
    let url_ = this.baseUrl + "/api/Hostel/AddNewHostel";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAddNewHostel(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAddNewHostel(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Response>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Response>;
    }));
  }

  protected processAddNewHostel(response: HttpResponseBase): Observable<Response> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Response.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param hostelId (optional) 
   * @return Success
   */
  deleteHostel(hostelId: string | undefined): Observable<Response> {
    let url_ = this.baseUrl + "/api/Hostel/DeleteHostel?";
    if (hostelId === null)
      throw new Error("The parameter 'hostelId' cannot be null.");
    else if (hostelId !== undefined)
      url_ += "hostelId=" + encodeURIComponent("" + hostelId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteHostel(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteHostel(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Response>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Response>;
    }));
  }

  protected processDeleteHostel(response: HttpResponseBase): Observable<Response> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Response.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getAllHostelNames(): Observable<GetAllRolesDTO[]> {
    let url_ = this.baseUrl + "/api/Hostel/GetAllHostelNames";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAllHostelNames(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllHostelNames(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetAllRolesDTO[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetAllRolesDTO[]>;
    }));
  }

  protected processGetAllHostelNames(response: HttpResponseBase): Observable<GetAllRolesDTO[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(GetAllRolesDTO.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class RoleClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param skip (optional) 
   * @param maxResult (optional) 
   * @return Success
   */
  getAllRoles(skip: number | undefined, maxResult: number | undefined): Observable<GetAllRolesDTOPaginationEntityDto> {
    let url_ = this.baseUrl + "/api/Role/GetAllRoles?";
    if (skip === null)
      throw new Error("The parameter 'skip' cannot be null.");
    else if (skip !== undefined)
      url_ += "skip=" + encodeURIComponent("" + skip) + "&";
    if (maxResult === null)
      throw new Error("The parameter 'maxResult' cannot be null.");
    else if (maxResult !== undefined)
      url_ += "maxResult=" + encodeURIComponent("" + maxResult) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAllRoles(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllRoles(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetAllRolesDTOPaginationEntityDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetAllRolesDTOPaginationEntityDto>;
    }));
  }

  protected processGetAllRoles(response: HttpResponseBase): Observable<GetAllRolesDTOPaginationEntityDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetAllRolesDTOPaginationEntityDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param roleId (optional) 
   * @return Success
   */
  getRoleById(roleId: string | undefined): Observable<GetAllRolesDTO> {
    let url_ = this.baseUrl + "/api/Role/GetRoleById?";
    if (roleId === null)
      throw new Error("The parameter 'roleId' cannot be null.");
    else if (roleId !== undefined)
      url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetRoleById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetRoleById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetAllRolesDTO>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetAllRolesDTO>;
    }));
  }

  protected processGetRoleById(response: HttpResponseBase): Observable<GetAllRolesDTO> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetAllRolesDTO.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  updateRole(body: GetAllRolesDTO | undefined): Observable<Response> {
    let url_ = this.baseUrl + "/api/Role/UpdateRole";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateRole(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateRole(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Response>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Response>;
    }));
  }

  protected processUpdateRole(response: HttpResponseBase): Observable<Response> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Response.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  addRole(body: AddRoleDTO | undefined): Observable<Response> {
    let url_ = this.baseUrl + "/api/Role/AddRole";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAddRole(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAddRole(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Response>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Response>;
    }));
  }

  protected processAddRole(response: HttpResponseBase): Observable<Response> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Response.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param roleId (optional) 
   * @return Success
   */
  deleteRole(roleId: string | undefined): Observable<Response> {
    let url_ = this.baseUrl + "/api/Role/DeleteRole?";
    if (roleId === null)
      throw new Error("The parameter 'roleId' cannot be null.");
    else if (roleId !== undefined)
      url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteRole(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteRole(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Response>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Response>;
    }));
  }

  protected processDeleteRole(response: HttpResponseBase): Observable<Response> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Response.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getAllRoleName(): Observable<GetAllRolesDTO[]> {
    let url_ = this.baseUrl + "/api/Role/GetAllRoleName";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAllRoleName(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllRoleName(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetAllRolesDTO[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetAllRolesDTO[]>;
    }));
  }

  protected processGetAllRoleName(response: HttpResponseBase): Observable<GetAllRolesDTO[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(GetAllRolesDTO.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class UserClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param skip (optional) 
   * @param maxResult (optional) 
   * @return Success
   */
  getAllUsers(skip: number | undefined, maxResult: number | undefined): Observable<GetAllUserDTOPaginationEntityDto> {
    let url_ = this.baseUrl + "/api/User/GetAllUsers?";
    if (skip === null)
      throw new Error("The parameter 'skip' cannot be null.");
    else if (skip !== undefined)
      url_ += "skip=" + encodeURIComponent("" + skip) + "&";
    if (maxResult === null)
      throw new Error("The parameter 'maxResult' cannot be null.");
    else if (maxResult !== undefined)
      url_ += "maxResult=" + encodeURIComponent("" + maxResult) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAllUsers(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllUsers(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetAllUserDTOPaginationEntityDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetAllUserDTOPaginationEntityDto>;
    }));
  }

  protected processGetAllUsers(response: HttpResponseBase): Observable<GetAllUserDTOPaginationEntityDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetAllUserDTOPaginationEntityDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param userId (optional) 
   * @return Success
   */
  getuserById(userId: string | undefined): Observable<GetAllUserDTO> {
    let url_ = this.baseUrl + "/api/User/GetuserById?";
    if (userId === null)
      throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined)
      url_ += "userId=" + encodeURIComponent("" + userId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetuserById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetuserById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetAllUserDTO>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetAllUserDTO>;
    }));
  }

  protected processGetuserById(response: HttpResponseBase): Observable<GetAllUserDTO> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetAllUserDTO.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  updateUser(body: GetAllUserDTO | undefined): Observable<Response> {
    let url_ = this.baseUrl + "/api/User/UpdateUser";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateUser(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateUser(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Response>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Response>;
    }));
  }

  protected processUpdateUser(response: HttpResponseBase): Observable<Response> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Response.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  addUser(body: AddUserDTO | undefined): Observable<Response> {
    let url_ = this.baseUrl + "/api/User/AddUser";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAddUser(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAddUser(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Response>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Response>;
    }));
  }

  protected processAddUser(response: HttpResponseBase): Observable<Response> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Response.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param userId (optional) 
   * @return Success
   */
  deleteUser(userId: string | undefined): Observable<Response> {
    let url_ = this.baseUrl + "/api/User/DeleteUser?";
    if (userId === null)
      throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined)
      url_ += "userId=" + encodeURIComponent("" + userId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteUser(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteUser(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Response>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Response>;
    }));
  }

  protected processDeleteUser(response: HttpResponseBase): Observable<Response> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Response.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class AddNewBranchDTO implements IAddNewBranchDTO {
  branchName?: string | null;
  fkUserId?: string | null;
  fkHostelId?: string | null;

  constructor(data?: IAddNewBranchDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.branchName = _data["branchName"] !== undefined ? _data["branchName"] : <any>null;
      this.fkUserId = _data["fkUserId"] !== undefined ? _data["fkUserId"] : <any>null;
      this.fkHostelId = _data["fkHostelId"] !== undefined ? _data["fkHostelId"] : <any>null;
    }
  }

  static fromJS(data: any): AddNewBranchDTO {
    data = typeof data === 'object' ? data : {};
    let result = new AddNewBranchDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["branchName"] = this.branchName !== undefined ? this.branchName : <any>null;
    data["fkUserId"] = this.fkUserId !== undefined ? this.fkUserId : <any>null;
    data["fkHostelId"] = this.fkHostelId !== undefined ? this.fkHostelId : <any>null;
    return data;
  }
}

export interface IAddNewBranchDTO {
  branchName?: string | null;
  fkUserId?: string | null;
  fkHostelId?: string | null;
}

export class AddNewHostelDTO implements IAddNewHostelDTO {
  hostelName?: string | null;

  constructor(data?: IAddNewHostelDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.hostelName = _data["hostelName"] !== undefined ? _data["hostelName"] : <any>null;
    }
  }

  static fromJS(data: any): AddNewHostelDTO {
    data = typeof data === 'object' ? data : {};
    let result = new AddNewHostelDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["hostelName"] = this.hostelName !== undefined ? this.hostelName : <any>null;
    return data;
  }
}

export interface IAddNewHostelDTO {
  hostelName?: string | null;
}

export class AddRoleDTO implements IAddRoleDTO {
  roleName?: string | null;

  constructor(data?: IAddRoleDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
    }
  }

  static fromJS(data: any): AddRoleDTO {
    data = typeof data === 'object' ? data : {};
    let result = new AddRoleDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
    return data;
  }
}

export interface IAddRoleDTO {
  roleName?: string | null;
}

export class AddUserDTO implements IAddUserDTO {
  userName?: string | null;
  emailID?: string | null;
  password?: string | null;
  mobileNUmber?: string | null;
  fkRoleId?: string | null;

  constructor(data?: IAddUserDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
      this.emailID = _data["emailID"] !== undefined ? _data["emailID"] : <any>null;
      this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
      this.mobileNUmber = _data["mobileNUmber"] !== undefined ? _data["mobileNUmber"] : <any>null;
      this.fkRoleId = _data["fkRoleId"] !== undefined ? _data["fkRoleId"] : <any>null;
    }
  }

  static fromJS(data: any): AddUserDTO {
    data = typeof data === 'object' ? data : {};
    let result = new AddUserDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userName"] = this.userName !== undefined ? this.userName : <any>null;
    data["emailID"] = this.emailID !== undefined ? this.emailID : <any>null;
    data["password"] = this.password !== undefined ? this.password : <any>null;
    data["mobileNUmber"] = this.mobileNUmber !== undefined ? this.mobileNUmber : <any>null;
    data["fkRoleId"] = this.fkRoleId !== undefined ? this.fkRoleId : <any>null;
    return data;
  }
}

export interface IAddUserDTO {
  userName?: string | null;
  emailID?: string | null;
  password?: string | null;
  mobileNUmber?: string | null;
  fkRoleId?: string | null;
}

export class GetAllHostelDTO implements IGetAllHostelDTO {
  hostelName?: string | null;
  pkHostelId?: string | null;

  constructor(data?: IGetAllHostelDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.hostelName = _data["hostelName"] !== undefined ? _data["hostelName"] : <any>null;
      this.pkHostelId = _data["pkHostelId"] !== undefined ? _data["pkHostelId"] : <any>null;
    }
  }

  static fromJS(data: any): GetAllHostelDTO {
    data = typeof data === 'object' ? data : {};
    let result = new GetAllHostelDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["hostelName"] = this.hostelName !== undefined ? this.hostelName : <any>null;
    data["pkHostelId"] = this.pkHostelId !== undefined ? this.pkHostelId : <any>null;
    return data;
  }
}

export interface IGetAllHostelDTO {
  hostelName?: string | null;
  pkHostelId?: string | null;
}

export class GetAllHostelDTOPaginationEntityDto implements IGetAllHostelDTOPaginationEntityDto {
  entities?: GetAllHostelDTO[] | null;
  count?: number;

  constructor(data?: IGetAllHostelDTOPaginationEntityDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["entities"])) {
        this.entities = [] as any;
        for (let item of _data["entities"])
          this.entities!.push(GetAllHostelDTO.fromJS(item));
      }
      else {
        this.entities = <any>null;
      }
      this.count = _data["count"] !== undefined ? _data["count"] : <any>null;
    }
  }

  static fromJS(data: any): GetAllHostelDTOPaginationEntityDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetAllHostelDTOPaginationEntityDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.entities)) {
      data["entities"] = [];
      for (let item of this.entities)
        data["entities"].push(item.toJSON());
    }
    data["count"] = this.count !== undefined ? this.count : <any>null;
    return data;
  }
}

export interface IGetAllHostelDTOPaginationEntityDto {
  entities?: GetAllHostelDTO[] | null;
  count?: number;
}

export class GetAllRolesDTO implements IGetAllRolesDTO {
  roleName?: string | null;
  pkRoleId?: string | null;

  constructor(data?: IGetAllRolesDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
      this.pkRoleId = _data["pkRoleId"] !== undefined ? _data["pkRoleId"] : <any>null;
    }
  }

  static fromJS(data: any): GetAllRolesDTO {
    data = typeof data === 'object' ? data : {};
    let result = new GetAllRolesDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
    data["pkRoleId"] = this.pkRoleId !== undefined ? this.pkRoleId : <any>null;
    return data;
  }
}

export interface IGetAllRolesDTO {
  roleName?: string | null;
  pkRoleId?: string | null;
}

export class GetAllRolesDTOPaginationEntityDto implements IGetAllRolesDTOPaginationEntityDto {
  entities?: GetAllRolesDTO[] | null;
  count?: number;

  constructor(data?: IGetAllRolesDTOPaginationEntityDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["entities"])) {
        this.entities = [] as any;
        for (let item of _data["entities"])
          this.entities!.push(GetAllRolesDTO.fromJS(item));
      }
      else {
        this.entities = <any>null;
      }
      this.count = _data["count"] !== undefined ? _data["count"] : <any>null;
    }
  }

  static fromJS(data: any): GetAllRolesDTOPaginationEntityDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetAllRolesDTOPaginationEntityDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.entities)) {
      data["entities"] = [];
      for (let item of this.entities)
        data["entities"].push(item.toJSON());
    }
    data["count"] = this.count !== undefined ? this.count : <any>null;
    return data;
  }
}

export interface IGetAllRolesDTOPaginationEntityDto {
  entities?: GetAllRolesDTO[] | null;
  count?: number;
}

export class GetAllUserDTO implements IGetAllUserDTO {
  pkUserProfileId?: string | null;
  userName?: string | null;
  emailID?: string | null;
  password?: string | null;
  mobileNUmber?: string | null;
  roleName?: string | null;
  fkroleId?: string | null;
  createdDate?: Date;

  constructor(data?: IGetAllUserDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pkUserProfileId = _data["pkUserProfileId"] !== undefined ? _data["pkUserProfileId"] : <any>null;
      this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
      this.emailID = _data["emailID"] !== undefined ? _data["emailID"] : <any>null;
      this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
      this.mobileNUmber = _data["mobileNUmber"] !== undefined ? _data["mobileNUmber"] : <any>null;
      this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
      this.fkroleId = _data["fkroleId"] !== undefined ? _data["fkroleId"] : <any>null;
      this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
    }
  }

  static fromJS(data: any): GetAllUserDTO {
    data = typeof data === 'object' ? data : {};
    let result = new GetAllUserDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["pkUserProfileId"] = this.pkUserProfileId !== undefined ? this.pkUserProfileId : <any>null;
    data["userName"] = this.userName !== undefined ? this.userName : <any>null;
    data["emailID"] = this.emailID !== undefined ? this.emailID : <any>null;
    data["password"] = this.password !== undefined ? this.password : <any>null;
    data["mobileNUmber"] = this.mobileNUmber !== undefined ? this.mobileNUmber : <any>null;
    data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
    data["fkroleId"] = this.fkroleId !== undefined ? this.fkroleId : <any>null;
    data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
    return data;
  }
}

export interface IGetAllUserDTO {
  pkUserProfileId?: string | null;
  userName?: string | null;
  emailID?: string | null;
  password?: string | null;
  mobileNUmber?: string | null;
  roleName?: string | null;
  fkroleId?: string | null;
  createdDate?: Date;
}

export class GetAllUserDTOPaginationEntityDto implements IGetAllUserDTOPaginationEntityDto {
  entities?: GetAllUserDTO[] | null;
  count?: number;

  constructor(data?: IGetAllUserDTOPaginationEntityDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["entities"])) {
        this.entities = [] as any;
        for (let item of _data["entities"])
          this.entities!.push(GetAllUserDTO.fromJS(item));
      }
      else {
        this.entities = <any>null;
      }
      this.count = _data["count"] !== undefined ? _data["count"] : <any>null;
    }
  }

  static fromJS(data: any): GetAllUserDTOPaginationEntityDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetAllUserDTOPaginationEntityDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.entities)) {
      data["entities"] = [];
      for (let item of this.entities)
        data["entities"].push(item.toJSON());
    }
    data["count"] = this.count !== undefined ? this.count : <any>null;
    return data;
  }
}

export interface IGetAllUserDTOPaginationEntityDto {
  entities?: GetAllUserDTO[] | null;
  count?: number;
}

export class LoginDTO implements ILoginDTO {
  userMail?: string | null;
  password?: string | null;

  constructor(data?: ILoginDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userMail = _data["userMail"] !== undefined ? _data["userMail"] : <any>null;
      this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
    }
  }

  static fromJS(data: any): LoginDTO {
    data = typeof data === 'object' ? data : {};
    let result = new LoginDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userMail"] = this.userMail !== undefined ? this.userMail : <any>null;
    data["password"] = this.password !== undefined ? this.password : <any>null;
    return data;
  }
}

export interface ILoginDTO {
  userMail?: string | null;
  password?: string | null;
}

export class LoginResponse implements ILoginResponse {
  readonly success?: boolean;
  errorMessage?: string | null;
  token?: string | null;

  constructor(data?: ILoginResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).success = _data["success"] !== undefined ? _data["success"] : <any>null;
      this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
      this.token = _data["token"] !== undefined ? _data["token"] : <any>null;
    }
  }

  static fromJS(data: any): LoginResponse {
    data = typeof data === 'object' ? data : {};
    let result = new LoginResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["success"] = this.success !== undefined ? this.success : <any>null;
    data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
    data["token"] = this.token !== undefined ? this.token : <any>null;
    return data;
  }
}

export interface ILoginResponse {
  success?: boolean;
  errorMessage?: string | null;
  token?: string | null;
}

export class Response implements IResponse {
  readonly success?: boolean;
  errorMessage?: string | null;

  constructor(data?: IResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).success = _data["success"] !== undefined ? _data["success"] : <any>null;
      this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
    }
  }

  static fromJS(data: any): Response {
    data = typeof data === 'object' ? data : {};
    let result = new Response();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["success"] = this.success !== undefined ? this.success : <any>null;
    data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IResponse {
  success?: boolean;
  errorMessage?: string | null;
}

export class UpdateBranchDTO implements IUpdateBranchDTO {
  pkbranchId?: string | null;
  branchName?: string | null;
  fkUserId?: string | null;
  fkHostelId?: string | null;

  constructor(data?: IUpdateBranchDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pkbranchId = _data["pkbranchId"] !== undefined ? _data["pkbranchId"] : <any>null;
      this.branchName = _data["branchName"] !== undefined ? _data["branchName"] : <any>null;
      this.fkUserId = _data["fkUserId"] !== undefined ? _data["fkUserId"] : <any>null;
      this.fkHostelId = _data["fkHostelId"] !== undefined ? _data["fkHostelId"] : <any>null;
    }
  }

  static fromJS(data: any): UpdateBranchDTO {
    data = typeof data === 'object' ? data : {};
    let result = new UpdateBranchDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["pkbranchId"] = this.pkbranchId !== undefined ? this.pkbranchId : <any>null;
    data["branchName"] = this.branchName !== undefined ? this.branchName : <any>null;
    data["fkUserId"] = this.fkUserId !== undefined ? this.fkUserId : <any>null;
    data["fkHostelId"] = this.fkHostelId !== undefined ? this.fkHostelId : <any>null;
    return data;
  }
}

export interface IUpdateBranchDTO {
  pkbranchId?: string | null;
  branchName?: string | null;
  fkUserId?: string | null;
  fkHostelId?: string | null;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
